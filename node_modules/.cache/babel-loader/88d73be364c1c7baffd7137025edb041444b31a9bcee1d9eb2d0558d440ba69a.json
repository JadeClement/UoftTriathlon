{"ast":null,"code":"var _jsxFileName = \"/Users/jadeclement/Documents/Developer/uofttri/src/components/RoleChangeNotification.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useAuth } from '../context/AuthContext';\nimport './RoleChangeNotification.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RoleChangeNotification = ({\n  currentUser\n}) => {\n  _s();\n  const {\n    updateUser\n  } = useAuth();\n  const [notification, setNotification] = useState(null);\n  const [showNotification, setShowNotification] = useState(false);\n  useEffect(() => {\n    if (!currentUser) return;\n\n    // Check for role change notifications\n    const checkNotifications = async () => {\n      try {\n        const token = localStorage.getItem('triathlonToken');\n        if (!token) return;\n        const response = await fetch('http://localhost:5001/api/users/role-change-notifications', {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        if (response.ok) {\n          const data = await response.json();\n          if (data.hasNotification) {\n            setNotification(data);\n            setShowNotification(true);\n\n            // Automatically update the user's session if role changed\n            if (data.newRole !== currentUser.role) {\n              console.log('ðŸ”„ Auto-updating user session from role', currentUser.role, 'to', data.newRole);\n\n              // Update the user's role in the AuthContext\n              updateUser({\n                role: data.newRole\n              });\n\n              // Also update localStorage to ensure persistence\n              const updatedUser = {\n                ...currentUser,\n                role: data.newRole\n              };\n              localStorage.setItem('triathlonUser', JSON.stringify(updatedUser));\n              console.log('âœ… User role automatically updated in session to:', data.newRole);\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Error checking role change notifications:', error);\n      }\n    };\n    checkNotifications();\n\n    // Set up periodic checking every 30 seconds to catch role changes\n    const interval = setInterval(checkNotifications, 30000);\n    return () => clearInterval(interval);\n  }, [currentUser, updateUser]);\n  const handleDismiss = async () => {\n    if (!notification) return;\n    try {\n      const token = localStorage.getItem('triathlonToken');\n      if (!token) return;\n\n      // Mark notification as read\n      await fetch('http://localhost:5001/api/users/mark-role-notification-read', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      // Update the user's session with the new role\n      if (notification.newRole !== currentUser.role) {\n        console.log('ðŸ”„ Updating user session from role', currentUser.role, 'to', notification.newRole);\n\n        // Update the user's role in the AuthContext\n        updateUser({\n          role: notification.newRole\n        });\n\n        // Also update localStorage to ensure persistence\n        const updatedUser = {\n          ...currentUser,\n          role: notification.newRole\n        };\n        localStorage.setItem('triathlonUser', JSON.stringify(updatedUser));\n\n        // Show success message\n        console.log('âœ… User role updated in session to:', notification.newRole);\n      }\n      setShowNotification(false);\n      setNotification(null);\n    } catch (error) {\n      console.error('Error marking notification as read:', error);\n    }\n  };\n  if (!showNotification || !notification) return null;\n  const getRoleDisplayName = role => {\n    switch (role) {\n      case 'pending':\n        return 'Pending Member';\n      case 'member':\n        return 'Member';\n      case 'exec':\n        return 'Executive';\n      case 'administrator':\n        return 'Administrator';\n      default:\n        return role;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"role-change-notification\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notification-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\uD83C\\uDF89 Role Updated!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-button\",\n          onClick: handleDismiss,\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notification-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Your role has been updated from \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: getRoleDisplayName(notification.oldRole)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 45\n          }, this), \" to\", ' ', /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: getRoleDisplayName(notification.newRole)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this), \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), notification.newRole === 'member' && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"welcome-message\",\n          children: \"Welcome to the club! You now have access to all member features.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"timestamp\",\n          children: [\"Updated on \", new Date(notification.createdAt).toLocaleDateString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notification-actions\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary\",\n          onClick: handleDismiss,\n          children: \"Got it!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n_s(RoleChangeNotification, \"G0em5ZlcQpbSt8kr6kCdKm8AGPE=\", false, function () {\n  return [useAuth];\n});\n_c = RoleChangeNotification;\nexport default RoleChangeNotification;\nvar _c;\n$RefreshReg$(_c, \"RoleChangeNotification\");","map":{"version":3,"names":["React","useState","useEffect","useAuth","jsxDEV","_jsxDEV","RoleChangeNotification","currentUser","_s","updateUser","notification","setNotification","showNotification","setShowNotification","checkNotifications","token","localStorage","getItem","response","fetch","headers","ok","data","json","hasNotification","newRole","role","console","log","updatedUser","setItem","JSON","stringify","error","interval","setInterval","clearInterval","handleDismiss","method","getRoleDisplayName","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","oldRole","Date","createdAt","toLocaleDateString","_c","$RefreshReg$"],"sources":["/Users/jadeclement/Documents/Developer/uofttri/src/components/RoleChangeNotification.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useAuth } from '../context/AuthContext';\nimport './RoleChangeNotification.css';\n\nconst RoleChangeNotification = ({ currentUser }) => {\n  const { updateUser } = useAuth();\n  const [notification, setNotification] = useState(null);\n  const [showNotification, setShowNotification] = useState(false);\n\n  useEffect(() => {\n    if (!currentUser) return;\n\n    // Check for role change notifications\n    const checkNotifications = async () => {\n      try {\n        const token = localStorage.getItem('triathlonToken');\n        if (!token) return;\n\n        const response = await fetch('http://localhost:5001/api/users/role-change-notifications', {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n\n        if (response.ok) {\n          const data = await response.json();\n          if (data.hasNotification) {\n            setNotification(data);\n            setShowNotification(true);\n            \n            // Automatically update the user's session if role changed\n            if (data.newRole !== currentUser.role) {\n              console.log('ðŸ”„ Auto-updating user session from role', currentUser.role, 'to', data.newRole);\n              \n              // Update the user's role in the AuthContext\n              updateUser({ role: data.newRole });\n              \n              // Also update localStorage to ensure persistence\n              const updatedUser = { ...currentUser, role: data.newRole };\n              localStorage.setItem('triathlonUser', JSON.stringify(updatedUser));\n              \n              console.log('âœ… User role automatically updated in session to:', data.newRole);\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Error checking role change notifications:', error);\n      }\n    };\n\n    checkNotifications();\n    \n    // Set up periodic checking every 30 seconds to catch role changes\n    const interval = setInterval(checkNotifications, 30000);\n    \n    return () => clearInterval(interval);\n  }, [currentUser, updateUser]);\n\n  const handleDismiss = async () => {\n    if (!notification) return;\n\n    try {\n      const token = localStorage.getItem('triathlonToken');\n      if (!token) return;\n\n      // Mark notification as read\n      await fetch('http://localhost:5001/api/users/mark-role-notification-read', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      // Update the user's session with the new role\n      if (notification.newRole !== currentUser.role) {\n        console.log('ðŸ”„ Updating user session from role', currentUser.role, 'to', notification.newRole);\n        \n        // Update the user's role in the AuthContext\n        updateUser({ role: notification.newRole });\n        \n        // Also update localStorage to ensure persistence\n        const updatedUser = { ...currentUser, role: notification.newRole };\n        localStorage.setItem('triathlonUser', JSON.stringify(updatedUser));\n        \n        // Show success message\n        console.log('âœ… User role updated in session to:', notification.newRole);\n      }\n\n      setShowNotification(false);\n      setNotification(null);\n    } catch (error) {\n      console.error('Error marking notification as read:', error);\n    }\n  };\n\n  if (!showNotification || !notification) return null;\n\n  const getRoleDisplayName = (role) => {\n    switch (role) {\n      case 'pending': return 'Pending Member';\n      case 'member': return 'Member';\n      case 'exec': return 'Executive';\n      case 'administrator': return 'Administrator';\n      default: return role;\n    }\n  };\n\n  return (\n    <div className=\"role-change-notification\">\n      <div className=\"notification-content\">\n        <div className=\"notification-header\">\n          <h3>ðŸŽ‰ Role Updated!</h3>\n          <button className=\"close-button\" onClick={handleDismiss}>Ã—</button>\n        </div>\n        <div className=\"notification-body\">\n          <p>\n            Your role has been updated from <strong>{getRoleDisplayName(notification.oldRole)}</strong> to{' '}\n            <strong>{getRoleDisplayName(notification.newRole)}</strong>.\n          </p>\n          {notification.newRole === 'member' && (\n            <p className=\"welcome-message\">\n              Welcome to the club! You now have access to all member features.\n            </p>\n          )}\n          <p className=\"timestamp\">\n            Updated on {new Date(notification.createdAt).toLocaleDateString()}\n          </p>\n        </div>\n        <div className=\"notification-actions\">\n          <button className=\"btn btn-primary\" onClick={handleDismiss}>\n            Got it!\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RoleChangeNotification;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}