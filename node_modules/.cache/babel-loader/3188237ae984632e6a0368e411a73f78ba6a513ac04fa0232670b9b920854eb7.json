{"ast":null,"code":"var _jsxFileName = \"/Users/jadeclement/Documents/Developer/uofttri/src/utils/linkUtils.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Utility function to convert URLs in text to clickable links\nexport const linkifyText = text => {\n  if (!text) return text;\n\n  // URL regex pattern that matches http/https URLs and www URLs\n  const urlRegex = /(https?:\\/\\/[^\\s]+|www\\.[^\\s]+)/gi;\n\n  // Split text by URLs and process each part\n  const parts = text.split(urlRegex);\n  return parts.map((part, index) => {\n    // Check if this part is a URL\n    if (urlRegex.test(part)) {\n      // Ensure URL has protocol\n      const href = part.startsWith('http') ? part : `https://${part}`;\n      return /*#__PURE__*/_jsxDEV(\"a\", {\n        href: href,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        style: {\n          color: '#4169E1',\n          textDecoration: 'underline',\n          wordBreak: 'break-all'\n        },\n        children: part\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this);\n    }\n\n    // Return regular text\n    return part;\n  });\n};\n\n// Alternative function that returns HTML string (for dangerouslySetInnerHTML)\nexport const linkifyTextAsHTML = text => {\n  if (!text) return text;\n  const urlRegex = /(https?:\\/\\/[^\\s]+|www\\.[^\\s]+)/gi;\n  return text.replace(urlRegex, url => {\n    const href = url.startsWith('http') ? url : `https://${url}`;\n    return `<a href=\"${href}\" target=\"_blank\" rel=\"noopener noreferrer\" style=\"color: #4169E1; text-decoration: underline; word-break: break-all;\">${url}</a>`;\n  });\n};","map":{"version":3,"names":["linkifyText","text","urlRegex","parts","split","map","part","index","test","href","startsWith","_jsxDEV","target","rel","style","color","textDecoration","wordBreak","children","fileName","_jsxFileName","lineNumber","columnNumber","linkifyTextAsHTML","replace","url"],"sources":["/Users/jadeclement/Documents/Developer/uofttri/src/utils/linkUtils.js"],"sourcesContent":["// Utility function to convert URLs in text to clickable links\nexport const linkifyText = (text) => {\n  if (!text) return text;\n  \n  // URL regex pattern that matches http/https URLs and www URLs\n  const urlRegex = /(https?:\\/\\/[^\\s]+|www\\.[^\\s]+)/gi;\n  \n  // Split text by URLs and process each part\n  const parts = text.split(urlRegex);\n  \n  return parts.map((part, index) => {\n    // Check if this part is a URL\n    if (urlRegex.test(part)) {\n      // Ensure URL has protocol\n      const href = part.startsWith('http') ? part : `https://${part}`;\n      \n      return (\n        <a \n          key={index}\n          href={href} \n          target=\"_blank\" \n          rel=\"noopener noreferrer\"\n          style={{ \n            color: '#4169E1', \n            textDecoration: 'underline',\n            wordBreak: 'break-all'\n          }}\n        >\n          {part}\n        </a>\n      );\n    }\n    \n    // Return regular text\n    return part;\n  });\n};\n\n// Alternative function that returns HTML string (for dangerouslySetInnerHTML)\nexport const linkifyTextAsHTML = (text) => {\n  if (!text) return text;\n  \n  const urlRegex = /(https?:\\/\\/[^\\s]+|www\\.[^\\s]+)/gi;\n  \n  return text.replace(urlRegex, (url) => {\n    const href = url.startsWith('http') ? url : `https://${url}`;\n    return `<a href=\"${href}\" target=\"_blank\" rel=\"noopener noreferrer\" style=\"color: #4169E1; text-decoration: underline; word-break: break-all;\">${url}</a>`;\n  });\n};\n"],"mappings":";;AAAA;AACA,OAAO,MAAMA,WAAW,GAAIC,IAAI,IAAK;EACnC,IAAI,CAACA,IAAI,EAAE,OAAOA,IAAI;;EAEtB;EACA,MAAMC,QAAQ,GAAG,mCAAmC;;EAEpD;EACA,MAAMC,KAAK,GAAGF,IAAI,CAACG,KAAK,CAACF,QAAQ,CAAC;EAElC,OAAOC,KAAK,CAACE,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;IAChC;IACA,IAAIL,QAAQ,CAACM,IAAI,CAACF,IAAI,CAAC,EAAE;MACvB;MACA,MAAMG,IAAI,GAAGH,IAAI,CAACI,UAAU,CAAC,MAAM,CAAC,GAAGJ,IAAI,GAAG,WAAWA,IAAI,EAAE;MAE/D,oBACEK,OAAA;QAEEF,IAAI,EAAEA,IAAK;QACXG,MAAM,EAAC,QAAQ;QACfC,GAAG,EAAC,qBAAqB;QACzBC,KAAK,EAAE;UACLC,KAAK,EAAE,SAAS;UAChBC,cAAc,EAAE,WAAW;UAC3BC,SAAS,EAAE;QACb,CAAE;QAAAC,QAAA,EAEDZ;MAAI,GAVAC,KAAK;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAWT,CAAC;IAER;;IAEA;IACA,OAAOhB,IAAI;EACb,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMiB,iBAAiB,GAAItB,IAAI,IAAK;EACzC,IAAI,CAACA,IAAI,EAAE,OAAOA,IAAI;EAEtB,MAAMC,QAAQ,GAAG,mCAAmC;EAEpD,OAAOD,IAAI,CAACuB,OAAO,CAACtB,QAAQ,EAAGuB,GAAG,IAAK;IACrC,MAAMhB,IAAI,GAAGgB,GAAG,CAACf,UAAU,CAAC,MAAM,CAAC,GAAGe,GAAG,GAAG,WAAWA,GAAG,EAAE;IAC5D,OAAO,YAAYhB,IAAI,0HAA0HgB,GAAG,MAAM;EAC5J,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}