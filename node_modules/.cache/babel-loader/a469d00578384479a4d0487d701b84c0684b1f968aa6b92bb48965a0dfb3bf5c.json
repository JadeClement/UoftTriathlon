{"ast":null,"code":"var _jsxFileName = \"/Users/jadeclement/Documents/Developer/uofttri/src/components/RoleChangeNotification.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useAuth } from '../context/AuthContext';\nimport './RoleChangeNotification.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RoleChangeNotification = ({\n  currentUser\n}) => {\n  _s();\n  const {\n    updateUser\n  } = useAuth();\n  const [notification, setNotification] = useState(null);\n  const [showNotification, setShowNotification] = useState(false);\n  useEffect(() => {\n    if (!currentUser) return;\n    console.log('ðŸ”” RoleChangeNotification: Starting notification check for user:', currentUser.id);\n\n    // Check for role change notifications\n    const checkNotifications = async () => {\n      try {\n        const token = localStorage.getItem('triathlonToken');\n        if (!token) return;\n        const response = await fetch(`${process.env.REACT_APP_API_BASE_URL || 'http://localhost:5001/api'}/users/role-change-notifications`, {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        console.log('ðŸ”” RoleChangeNotification: Response status:', response.status);\n        if (response.ok) {\n          const data = await response.json();\n          console.log('ðŸ”” RoleChangeNotification: Response data:', data);\n          if (data.hasNotification) {\n            setNotification(data);\n            setShowNotification(true);\n\n            // Automatically update the user's session if role changed\n            if (data.newRole !== currentUser.role) {\n              console.log('ðŸ”„ Auto-updating user session from role', currentUser.role, 'to', data.newRole);\n\n              // Show a message that the user needs to log out and back in\n              alert(`ðŸŽ‰ Your role has been updated from ${currentUser.role} to ${data.newRole}!\\n\\nTo access your new permissions, please log out and log back in.`);\n\n              // Force logout to get a new token with updated role\n              localStorage.removeItem('triathlonUser');\n              localStorage.removeItem('triathlonToken');\n              window.location.reload();\n            }\n          }\n        }\n      } catch (error) {\n        console.error('ðŸ”” RoleChangeNotification: Error checking notifications:', error);\n      }\n    };\n    checkNotifications();\n\n    // Set up periodic checking every 30 seconds to catch role changes\n    const interval = setInterval(checkNotifications, 30000);\n    return () => clearInterval(interval);\n  }, [currentUser, updateUser]);\n  const handleDismiss = async () => {\n    if (!notification) return;\n    try {\n      const token = localStorage.getItem('triathlonToken');\n      if (!token) return;\n\n      // Mark notification as read\n      await fetch(`${process.env.REACT_APP_API_BASE_URL || 'http://localhost:5001/api'}/users/mark-role-notification-read`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      // Update the user's session with the new role\n      if (notification.newRole !== currentUser.role) {\n        console.log('ðŸ”„ Updating user session from role', currentUser.role, 'to', notification.newRole);\n\n        // Show a message that the user needs to log out and back in\n        alert(`ðŸŽ‰ Your role has been updated from ${currentUser.role} to ${notification.newRole}!\\n\\nTo access your new permissions, please log out and log back in.`);\n\n        // Force logout to get a new token with updated role\n        localStorage.removeItem('triathlonUser');\n        localStorage.removeItem('triathlonToken');\n        window.location.reload();\n      }\n      setShowNotification(false);\n      setNotification(null);\n    } catch (error) {\n      console.error('Error marking notification as read:', error);\n    }\n  };\n  if (!showNotification || !notification) return null;\n  const getRoleDisplayName = role => {\n    switch (role) {\n      case 'pending':\n        return 'Pending Member';\n      case 'member':\n        return 'Member';\n      case 'exec':\n        return 'Executive';\n      case 'administrator':\n        return 'Administrator';\n      default:\n        return role;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"role-change-notification\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notification-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\uD83C\\uDF89 Role Updated!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-button\",\n          onClick: handleDismiss,\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notification-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Your role has been updated from \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: getRoleDisplayName(notification.oldRole)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 45\n          }, this), \" to\", ' ', /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: getRoleDisplayName(notification.newRole)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this), \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), notification.newRole === 'member' && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"welcome-message\",\n          children: \"Welcome to the club! You now have access to all member features.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"timestamp\",\n          children: [\"Updated on \", new Date(notification.createdAt).toLocaleDateString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notification-actions\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary\",\n          onClick: handleDismiss,\n          children: \"Got it!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n_s(RoleChangeNotification, \"G0em5ZlcQpbSt8kr6kCdKm8AGPE=\", false, function () {\n  return [useAuth];\n});\n_c = RoleChangeNotification;\nexport default RoleChangeNotification;\nvar _c;\n$RefreshReg$(_c, \"RoleChangeNotification\");","map":{"version":3,"names":["React","useState","useEffect","useAuth","jsxDEV","_jsxDEV","RoleChangeNotification","currentUser","_s","updateUser","notification","setNotification","showNotification","setShowNotification","console","log","id","checkNotifications","token","localStorage","getItem","response","fetch","process","env","REACT_APP_API_BASE_URL","headers","status","ok","data","json","hasNotification","newRole","role","alert","removeItem","window","location","reload","error","interval","setInterval","clearInterval","handleDismiss","method","getRoleDisplayName","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","oldRole","Date","createdAt","toLocaleDateString","_c","$RefreshReg$"],"sources":["/Users/jadeclement/Documents/Developer/uofttri/src/components/RoleChangeNotification.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useAuth } from '../context/AuthContext';\nimport './RoleChangeNotification.css';\n\nconst RoleChangeNotification = ({ currentUser }) => {\n  const { updateUser } = useAuth();\n  const [notification, setNotification] = useState(null);\n  const [showNotification, setShowNotification] = useState(false);\n\n  useEffect(() => {\n    if (!currentUser) return;\n\n    console.log('ðŸ”” RoleChangeNotification: Starting notification check for user:', currentUser.id);\n\n    // Check for role change notifications\n    const checkNotifications = async () => {\n      try {\n        const token = localStorage.getItem('triathlonToken');\n        if (!token) return;\n\n        const response = await fetch(`${process.env.REACT_APP_API_BASE_URL || 'http://localhost:5001/api'}/users/role-change-notifications`, {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n\n        console.log('ðŸ”” RoleChangeNotification: Response status:', response.status);\n        if (response.ok) {\n          const data = await response.json();\n          console.log('ðŸ”” RoleChangeNotification: Response data:', data);\n          if (data.hasNotification) {\n            setNotification(data);\n            setShowNotification(true);\n            \n            // Automatically update the user's session if role changed\n            if (data.newRole !== currentUser.role) {\n              console.log('ðŸ”„ Auto-updating user session from role', currentUser.role, 'to', data.newRole);\n              \n              // Show a message that the user needs to log out and back in\n              alert(`ðŸŽ‰ Your role has been updated from ${currentUser.role} to ${data.newRole}!\\n\\nTo access your new permissions, please log out and log back in.`);\n              \n              // Force logout to get a new token with updated role\n              localStorage.removeItem('triathlonUser');\n              localStorage.removeItem('triathlonToken');\n              window.location.reload();\n            }\n          }\n        }\n      } catch (error) {\n        console.error('ðŸ”” RoleChangeNotification: Error checking notifications:', error);\n      }\n    };\n\n    checkNotifications();\n    \n    // Set up periodic checking every 30 seconds to catch role changes\n    const interval = setInterval(checkNotifications, 30000);\n    \n    return () => clearInterval(interval);\n  }, [currentUser, updateUser]);\n\n  const handleDismiss = async () => {\n    if (!notification) return;\n\n    try {\n      const token = localStorage.getItem('triathlonToken');\n      if (!token) return;\n\n      // Mark notification as read\n              await fetch(`${process.env.REACT_APP_API_BASE_URL || 'http://localhost:5001/api'}/users/mark-role-notification-read`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      // Update the user's session with the new role\n      if (notification.newRole !== currentUser.role) {\n        console.log('ðŸ”„ Updating user session from role', currentUser.role, 'to', notification.newRole);\n        \n        // Show a message that the user needs to log out and back in\n        alert(`ðŸŽ‰ Your role has been updated from ${currentUser.role} to ${notification.newRole}!\\n\\nTo access your new permissions, please log out and log back in.`);\n        \n        // Force logout to get a new token with updated role\n        localStorage.removeItem('triathlonUser');\n        localStorage.removeItem('triathlonToken');\n        window.location.reload();\n      }\n\n      setShowNotification(false);\n      setNotification(null);\n    } catch (error) {\n      console.error('Error marking notification as read:', error);\n    }\n  };\n\n  if (!showNotification || !notification) return null;\n\n  const getRoleDisplayName = (role) => {\n    switch (role) {\n      case 'pending': return 'Pending Member';\n      case 'member': return 'Member';\n      case 'exec': return 'Executive';\n      case 'administrator': return 'Administrator';\n      default: return role;\n    }\n  };\n\n  return (\n    <div className=\"role-change-notification\">\n      <div className=\"notification-content\">\n        <div className=\"notification-header\">\n          <h3>ðŸŽ‰ Role Updated!</h3>\n          <button className=\"close-button\" onClick={handleDismiss}>Ã—</button>\n        </div>\n        <div className=\"notification-body\">\n          <p>\n            Your role has been updated from <strong>{getRoleDisplayName(notification.oldRole)}</strong> to{' '}\n            <strong>{getRoleDisplayName(notification.newRole)}</strong>.\n          </p>\n          {notification.newRole === 'member' && (\n            <p className=\"welcome-message\">\n              Welcome to the club! You now have access to all member features.\n            </p>\n          )}\n          <p className=\"timestamp\">\n            Updated on {new Date(notification.createdAt).toLocaleDateString()}\n          </p>\n        </div>\n        <div className=\"notification-actions\">\n          <button className=\"btn btn-primary\" onClick={handleDismiss}>\n            Got it!\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RoleChangeNotification;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}