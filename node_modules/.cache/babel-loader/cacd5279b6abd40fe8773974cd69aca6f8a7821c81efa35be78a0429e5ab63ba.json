{"ast":null,"code":"var _jsxFileName = \"/Users/jadeclement/Documents/Developer/uofttri/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const API_BASE_URL = 'http://localhost:5001/api';\n  useEffect(() => {\n    // Check if user is logged in from localStorage (for now)\n    const savedUser = localStorage.getItem('triathlonUser');\n    if (savedUser) {\n      try {\n        setCurrentUser(JSON.parse(savedUser));\n      } catch (error) {\n        console.error('Error parsing saved user:', error);\n        localStorage.removeItem('triathlonUser');\n      }\n    }\n    setLoading(false);\n  }, []);\n  const signup = async (email, password, name) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/signup`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password,\n          name\n        })\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Signup failed');\n      }\n      const user = await response.json();\n\n      // Store user in localStorage for now (will be replaced with JWT)\n      localStorage.setItem('triathlonUser', JSON.stringify(user));\n      setCurrentUser(user);\n      return user;\n    } catch (error) {\n      console.error('Signup error:', error);\n      throw error;\n    }\n  };\n  const login = (email, password) => {\n    // In a real app, this would validate credentials\n    const savedUser = localStorage.getItem('triathlonUser');\n    if (savedUser) {\n      const user = JSON.parse(savedUser);\n      if (user.email === email) {\n        setCurrentUser(user);\n\n        // Track login activity\n        const loginActivity = {\n          userId: user.id || user.email,\n          userName: user.name || user.email,\n          loginTime: new Date().toISOString(),\n          ipAddress: 'N/A' // In a real app, you'd get this from the server\n        };\n        const existingActivity = JSON.parse(localStorage.getItem('loginHistory') || '[]');\n        existingActivity.push(loginActivity);\n        localStorage.setItem('loginHistory', JSON.stringify(existingActivity));\n        return user;\n      }\n    }\n    throw new Error('Invalid credentials');\n  };\n  const logout = () => {\n    localStorage.removeItem('triathlonUser');\n    setCurrentUser(null);\n  };\n  const getUserRole = user => {\n    if (!user) return 'public';\n    return user.role || 'public';\n  };\n  const hasPermission = (user, requiredRole) => {\n    const userRole = getUserRole(user);\n    const roleHierarchy = {\n      'public': 0,\n      'pending': 1,\n      'member': 2,\n      'exec': 3,\n      'administrator': 4\n    };\n    return roleHierarchy[userRole] >= roleHierarchy[requiredRole];\n  };\n  const isAdmin = user => {\n    return hasPermission(user, 'administrator');\n  };\n  const isExec = user => {\n    return hasPermission(user, 'exec');\n  };\n  const isMember = user => {\n    return hasPermission(user, 'member');\n  };\n\n  // Temporary function to promote current user to admin (for development)\n  const promoteToAdmin = () => {\n    if (currentUser) {\n      const updatedUser = {\n        ...currentUser,\n        role: 'administrator'\n      };\n      setCurrentUser(updatedUser);\n      localStorage.setItem('triathlonUser', JSON.stringify(updatedUser));\n      return updatedUser;\n    }\n    return null;\n  };\n  const value = {\n    currentUser,\n    signup,\n    login,\n    logout,\n    loading,\n    isAdmin,\n    isExec,\n    isMember,\n    hasPermission,\n    getUserRole,\n    promoteToAdmin\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"+Bt7EujFHjK6mRV3YX1iAtSqXvQ=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","currentUser","setCurrentUser","loading","setLoading","API_BASE_URL","savedUser","localStorage","getItem","JSON","parse","error","console","removeItem","signup","email","password","name","response","fetch","method","headers","body","stringify","ok","json","message","user","setItem","login","loginActivity","userId","id","userName","loginTime","Date","toISOString","ipAddress","existingActivity","push","logout","getUserRole","role","hasPermission","requiredRole","userRole","roleHierarchy","isAdmin","isExec","isMember","promoteToAdmin","updatedUser","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jadeclement/Documents/Developer/uofttri/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  const API_BASE_URL = 'http://localhost:5001/api';\n\n  useEffect(() => {\n    // Check if user is logged in from localStorage (for now)\n    const savedUser = localStorage.getItem('triathlonUser');\n    if (savedUser) {\n      try {\n        setCurrentUser(JSON.parse(savedUser));\n      } catch (error) {\n        console.error('Error parsing saved user:', error);\n        localStorage.removeItem('triathlonUser');\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  const signup = async (email, password, name) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/signup`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password, name }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Signup failed');\n      }\n\n      const user = await response.json();\n      \n      // Store user in localStorage for now (will be replaced with JWT)\n      localStorage.setItem('triathlonUser', JSON.stringify(user));\n      setCurrentUser(user);\n      return user;\n    } catch (error) {\n      console.error('Signup error:', error);\n      throw error;\n    }\n  };\n\n  const login = (email, password) => {\n    // In a real app, this would validate credentials\n    const savedUser = localStorage.getItem('triathlonUser');\n    if (savedUser) {\n      const user = JSON.parse(savedUser);\n      if (user.email === email) {\n        setCurrentUser(user);\n        \n        // Track login activity\n        const loginActivity = {\n          userId: user.id || user.email,\n          userName: user.name || user.email,\n          loginTime: new Date().toISOString(),\n          ipAddress: 'N/A' // In a real app, you'd get this from the server\n        };\n        \n        const existingActivity = JSON.parse(localStorage.getItem('loginHistory') || '[]');\n        existingActivity.push(loginActivity);\n        localStorage.setItem('loginHistory', JSON.stringify(existingActivity));\n        \n        return user;\n      }\n    }\n    throw new Error('Invalid credentials');\n  };\n\n  const logout = () => {\n    localStorage.removeItem('triathlonUser');\n    setCurrentUser(null);\n  };\n\n  const getUserRole = (user) => {\n    if (!user) return 'public';\n    return user.role || 'public';\n  };\n\n  const hasPermission = (user, requiredRole) => {\n    const userRole = getUserRole(user);\n    const roleHierarchy = {\n      'public': 0,\n      'pending': 1,\n      'member': 2,\n      'exec': 3,\n      'administrator': 4\n    };\n    \n    return roleHierarchy[userRole] >= roleHierarchy[requiredRole];\n  };\n\n  const isAdmin = (user) => {\n    return hasPermission(user, 'administrator');\n  };\n\n  const isExec = (user) => {\n    return hasPermission(user, 'exec');\n  };\n\n  const isMember = (user) => {\n    return hasPermission(user, 'member');\n  };\n\n  // Temporary function to promote current user to admin (for development)\n  const promoteToAdmin = () => {\n    if (currentUser) {\n      const updatedUser = { ...currentUser, role: 'administrator' };\n      setCurrentUser(updatedUser);\n      localStorage.setItem('triathlonUser', JSON.stringify(updatedUser));\n      return updatedUser;\n    }\n    return null;\n  };\n\n  const value = {\n    currentUser,\n    signup,\n    login,\n    logout,\n    loading,\n    isAdmin,\n    isExec,\n    isMember,\n    hasPermission,\n    getUserRole,\n    promoteToAdmin\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMO,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,OAAO,GAAGR,UAAU,CAACK,WAAW,CAAC;EACvC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,OAAO;AAQpB,OAAO,MAAMI,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAE5C,MAAMgB,YAAY,GAAG,2BAA2B;EAEhDf,SAAS,CAAC,MAAM;IACd;IACA,MAAMgB,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;IACvD,IAAIF,SAAS,EAAE;MACb,IAAI;QACFJ,cAAc,CAACO,IAAI,CAACC,KAAK,CAACJ,SAAS,CAAC,CAAC;MACvC,CAAC,CAAC,OAAOK,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACjDJ,YAAY,CAACM,UAAU,CAAC,eAAe,CAAC;MAC1C;IACF;IACAT,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMU,MAAM,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,EAAEC,IAAI,KAAK;IAC9C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGd,YAAY,cAAc,EAAE;QAC1De,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEb,IAAI,CAACc,SAAS,CAAC;UAAER,KAAK;UAAEC,QAAQ;UAAEC;QAAK,CAAC;MAChD,CAAC,CAAC;MAEF,IAAI,CAACC,QAAQ,CAACM,EAAE,EAAE;QAChB,MAAMb,KAAK,GAAG,MAAMO,QAAQ,CAACO,IAAI,CAAC,CAAC;QACnC,MAAM,IAAI5B,KAAK,CAACc,KAAK,CAACe,OAAO,IAAI,eAAe,CAAC;MACnD;MAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACO,IAAI,CAAC,CAAC;;MAElC;MACAlB,YAAY,CAACqB,OAAO,CAAC,eAAe,EAAEnB,IAAI,CAACc,SAAS,CAACI,IAAI,CAAC,CAAC;MAC3DzB,cAAc,CAACyB,IAAI,CAAC;MACpB,OAAOA,IAAI;IACb,CAAC,CAAC,OAAOhB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrC,MAAMA,KAAK;IACb;EACF,CAAC;EAED,MAAMkB,KAAK,GAAGA,CAACd,KAAK,EAAEC,QAAQ,KAAK;IACjC;IACA,MAAMV,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;IACvD,IAAIF,SAAS,EAAE;MACb,MAAMqB,IAAI,GAAGlB,IAAI,CAACC,KAAK,CAACJ,SAAS,CAAC;MAClC,IAAIqB,IAAI,CAACZ,KAAK,KAAKA,KAAK,EAAE;QACxBb,cAAc,CAACyB,IAAI,CAAC;;QAEpB;QACA,MAAMG,aAAa,GAAG;UACpBC,MAAM,EAAEJ,IAAI,CAACK,EAAE,IAAIL,IAAI,CAACZ,KAAK;UAC7BkB,QAAQ,EAAEN,IAAI,CAACV,IAAI,IAAIU,IAAI,CAACZ,KAAK;UACjCmB,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;UACnCC,SAAS,EAAE,KAAK,CAAC;QACnB,CAAC;QAED,MAAMC,gBAAgB,GAAG7B,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,IAAI,IAAI,CAAC;QACjF8B,gBAAgB,CAACC,IAAI,CAACT,aAAa,CAAC;QACpCvB,YAAY,CAACqB,OAAO,CAAC,cAAc,EAAEnB,IAAI,CAACc,SAAS,CAACe,gBAAgB,CAAC,CAAC;QAEtE,OAAOX,IAAI;MACb;IACF;IACA,MAAM,IAAI9B,KAAK,CAAC,qBAAqB,CAAC;EACxC,CAAC;EAED,MAAM2C,MAAM,GAAGA,CAAA,KAAM;IACnBjC,YAAY,CAACM,UAAU,CAAC,eAAe,CAAC;IACxCX,cAAc,CAAC,IAAI,CAAC;EACtB,CAAC;EAED,MAAMuC,WAAW,GAAId,IAAI,IAAK;IAC5B,IAAI,CAACA,IAAI,EAAE,OAAO,QAAQ;IAC1B,OAAOA,IAAI,CAACe,IAAI,IAAI,QAAQ;EAC9B,CAAC;EAED,MAAMC,aAAa,GAAGA,CAAChB,IAAI,EAAEiB,YAAY,KAAK;IAC5C,MAAMC,QAAQ,GAAGJ,WAAW,CAACd,IAAI,CAAC;IAClC,MAAMmB,aAAa,GAAG;MACpB,QAAQ,EAAE,CAAC;MACX,SAAS,EAAE,CAAC;MACZ,QAAQ,EAAE,CAAC;MACX,MAAM,EAAE,CAAC;MACT,eAAe,EAAE;IACnB,CAAC;IAED,OAAOA,aAAa,CAACD,QAAQ,CAAC,IAAIC,aAAa,CAACF,YAAY,CAAC;EAC/D,CAAC;EAED,MAAMG,OAAO,GAAIpB,IAAI,IAAK;IACxB,OAAOgB,aAAa,CAAChB,IAAI,EAAE,eAAe,CAAC;EAC7C,CAAC;EAED,MAAMqB,MAAM,GAAIrB,IAAI,IAAK;IACvB,OAAOgB,aAAa,CAAChB,IAAI,EAAE,MAAM,CAAC;EACpC,CAAC;EAED,MAAMsB,QAAQ,GAAItB,IAAI,IAAK;IACzB,OAAOgB,aAAa,CAAChB,IAAI,EAAE,QAAQ,CAAC;EACtC,CAAC;;EAED;EACA,MAAMuB,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAIjD,WAAW,EAAE;MACf,MAAMkD,WAAW,GAAG;QAAE,GAAGlD,WAAW;QAAEyC,IAAI,EAAE;MAAgB,CAAC;MAC7DxC,cAAc,CAACiD,WAAW,CAAC;MAC3B5C,YAAY,CAACqB,OAAO,CAAC,eAAe,EAAEnB,IAAI,CAACc,SAAS,CAAC4B,WAAW,CAAC,CAAC;MAClE,OAAOA,WAAW;IACpB;IACA,OAAO,IAAI;EACb,CAAC;EAED,MAAMC,KAAK,GAAG;IACZnD,WAAW;IACXa,MAAM;IACNe,KAAK;IACLW,MAAM;IACNrC,OAAO;IACP4C,OAAO;IACPC,MAAM;IACNC,QAAQ;IACRN,aAAa;IACbF,WAAW;IACXS;EACF,CAAC;EAED,oBACE1D,OAAA,CAACC,WAAW,CAAC4D,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAArD,QAAA,EAChC,CAACI,OAAO,IAAIJ;EAAQ;IAAAuD,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAE3B,CAAC;AAACzD,GAAA,CA1IWF,YAAY;AAAA4D,EAAA,GAAZ5D,YAAY;AAAA,IAAA4D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}