{"ast":null,"code":"var _jsxFileName = \"/Users/jadeclement/Documents/Developer/uofttri/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { installFetchInterceptor } from '../utils/installFetchInterceptor';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:5001/api';\n  useEffect(() => {\n    console.log('🔄 AuthContext useEffect running...');\n\n    // TEMPORARILY DISABLE FETCH INTERCEPTOR FOR DEBUGGING\n    console.log('🔒 Fetch interceptor DISABLED for debugging');\n    const remove = () => {};\n\n    // Check if user is logged in from localStorage (for now)\n    const savedUser = localStorage.getItem('triathlonUser');\n    console.log('📦 Saved user from localStorage:', savedUser);\n    if (savedUser) {\n      try {\n        const parsedUser = JSON.parse(savedUser);\n        console.log('✅ Parsed user successfully:', parsedUser);\n        setCurrentUser(parsedUser);\n      } catch (error) {\n        console.error('❌ Error parsing saved user:', error);\n        localStorage.removeItem('triathlonUser');\n      }\n    } else {\n      console.log('❌ No saved user found in localStorage');\n    }\n    setLoading(false);\n    console.log('🏁 AuthContext loading complete');\n    return () => {\n      if (typeof remove === 'function') remove();\n    };\n  }, []);\n  const signup = async (email, password, name, phoneNumber) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password,\n          name,\n          phoneNumber\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Signup failed');\n      }\n      const responseData = await response.json();\n      console.log('✅ Signup response received:', responseData);\n      const {\n        user,\n        token\n      } = responseData;\n      if (!token) {\n        console.error('❌ No token in signup response');\n        throw new Error('Signup failed - no token received');\n      }\n\n      // Normalize user data to ensure consistent field names\n      const normalizedUser = {\n        ...user,\n        charterAccepted: user.charter_accepted || user.charterAccepted,\n        phoneNumber: user.phone_number || user.phoneNumber\n      };\n\n      // Remove duplicate fields to keep only normalized versions\n      delete normalizedUser.phone_number;\n      delete normalizedUser.charter_accepted;\n\n      // Store user and token separately\n      localStorage.setItem('triathlonUser', JSON.stringify(normalizedUser));\n      localStorage.setItem('triathlonToken', token);\n      console.log('💾 User and token stored in localStorage');\n      setCurrentUser(normalizedUser);\n      return normalizedUser;\n    } catch (error) {\n      console.error('Signup error:', error);\n      throw error;\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      console.log('🔐 Attempting login for:', email);\n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Login failed');\n      }\n      const responseData = await response.json();\n      console.log('✅ Login response received:', responseData);\n      const {\n        user,\n        token\n      } = responseData;\n      if (!token) {\n        console.error('❌ No token in login response');\n        throw new Error('Login failed - no token received');\n      }\n\n      // Normalize user data to ensure consistent field names\n      const normalizedUser = {\n        ...user,\n        charterAccepted: user.charter_accepted || user.charterAccepted,\n        profilePictureUrl: user.profile_picture_url || user.profilePictureUrl,\n        phoneNumber: user.phone_number || user.phoneNumber,\n        bio: user.bio\n      };\n\n      // Remove duplicate fields to keep only normalized versions\n      delete normalizedUser.phone_number;\n      delete normalizedUser.profile_picture_url;\n      delete normalizedUser.charter_accepted;\n\n      // Store user and token separately\n      localStorage.setItem('triathlonUser', JSON.stringify(normalizedUser));\n      localStorage.setItem('triathlonToken', token);\n      console.log('💾 User and token stored in localStorage');\n      setCurrentUser(normalizedUser);\n      console.log('👤 Current user state set to:', normalizedUser);\n      return normalizedUser;\n    } catch (error) {\n      console.error('❌ Login error:', error);\n      throw error;\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('triathlonUser');\n    localStorage.removeItem('triathlonToken');\n    setCurrentUser(null);\n\n    // Force a page reload to clear any protected routes\n    window.location.href = '/login';\n  };\n  const getUserRole = user => {\n    if (!user) return 'public';\n    return user.role || 'public';\n  };\n  const hasPermission = (user, requiredRole) => {\n    const userRole = getUserRole(user);\n    const roleHierarchy = {\n      'public': 0,\n      'pending': 1,\n      'member': 2,\n      'exec': 3,\n      'administrator': 4\n    };\n    return roleHierarchy[userRole] >= roleHierarchy[requiredRole];\n  };\n  const isAdmin = user => {\n    return hasPermission(user, 'administrator');\n  };\n  const isExec = user => {\n    return hasPermission(user, 'exec');\n  };\n  const isMember = user => {\n    return hasPermission(user, 'member');\n  };\n\n  // Temporary function to promote current user to admin (for development)\n  const promoteToAdmin = () => {\n    if (currentUser) {\n      const updatedUser = {\n        ...currentUser,\n        role: 'administrator'\n      };\n      setCurrentUser(updatedUser);\n      localStorage.setItem('triathlonUser', JSON.stringify(updatedUser));\n      return updatedUser;\n    }\n    return null;\n  };\n\n  // Function to update user profile\n  const updateUser = updatedUserData => {\n    console.log('🔄 AuthContext updateUser called with:', updatedUserData);\n    console.log('🔄 Current user before update:', currentUser);\n    const updatedUser = {\n      ...currentUser,\n      ...updatedUserData\n    };\n\n    // Ensure charterAccepted field is normalized\n    if (updatedUserData.charter_accepted !== undefined) {\n      updatedUser.charterAccepted = updatedUserData.charter_accepted;\n    }\n    console.log('🔄 Updated user object:', updatedUser);\n    setCurrentUser(updatedUser);\n    localStorage.setItem('triathlonUser', JSON.stringify(updatedUser));\n    console.log('✅ AuthContext updateUser completed');\n    return updatedUser;\n  };\n\n  // Check if current token is valid\n  const isTokenValid = async () => {\n    const token = localStorage.getItem('triathlonToken');\n    if (!token) return false;\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/profile`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      return response.ok;\n    } catch (error) {\n      console.error('Token validation error:', error);\n      return false;\n    }\n  };\n\n  // Refresh user data and token\n  const refreshUserData = async () => {\n    const token = localStorage.getItem('triathlonToken');\n    if (!token) return false;\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/profile`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (response.ok) {\n        const {\n          user\n        } = await response.json();\n\n        // Normalize user data to ensure consistent field names\n        const normalizedUser = {\n          ...user,\n          charterAccepted: user.charter_accepted || user.charterAccepted,\n          profilePictureUrl: user.profile_picture_url || user.profilePictureUrl,\n          phoneNumber: user.phone_number || user.phoneNumber,\n          bio: user.bio\n        };\n        setCurrentUser(normalizedUser);\n        localStorage.setItem('triathlonUser', JSON.stringify(normalizedUser));\n        return true;\n      } else {\n        // Token is invalid, clear it and redirect to login\n        logout();\n        return false;\n      }\n    } catch (error) {\n      console.error('Refresh user data error:', error);\n      logout();\n      return false;\n    }\n  };\n  const value = {\n    currentUser,\n    signup,\n    login,\n    logout,\n    loading,\n    isAdmin,\n    isExec,\n    isMember,\n    hasPermission,\n    getUserRole,\n    promoteToAdmin,\n    updateUser,\n    isTokenValid,\n    refreshUserData\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 303,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"+Bt7EujFHjK6mRV3YX1iAtSqXvQ=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","installFetchInterceptor","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","currentUser","setCurrentUser","loading","setLoading","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","console","log","remove","savedUser","localStorage","getItem","parsedUser","JSON","parse","error","removeItem","signup","email","password","name","phoneNumber","response","fetch","method","headers","body","stringify","ok","errorData","json","responseData","user","token","normalizedUser","charterAccepted","charter_accepted","phone_number","setItem","login","profilePictureUrl","profile_picture_url","bio","logout","window","location","href","getUserRole","role","hasPermission","requiredRole","userRole","roleHierarchy","isAdmin","isExec","isMember","promoteToAdmin","updatedUser","updateUser","updatedUserData","undefined","isTokenValid","refreshUserData","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jadeclement/Documents/Developer/uofttri/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { installFetchInterceptor } from '../utils/installFetchInterceptor';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:5001/api';\n\n  useEffect(() => {\n    console.log('🔄 AuthContext useEffect running...');\n\n    // TEMPORARILY DISABLE FETCH INTERCEPTOR FOR DEBUGGING\n    console.log('🔒 Fetch interceptor DISABLED for debugging');\n    const remove = () => {};\n\n    // Check if user is logged in from localStorage (for now)\n    const savedUser = localStorage.getItem('triathlonUser');\n    console.log('📦 Saved user from localStorage:', savedUser);\n    \n    if (savedUser) {\n      try {\n        const parsedUser = JSON.parse(savedUser);\n        console.log('✅ Parsed user successfully:', parsedUser);\n        setCurrentUser(parsedUser);\n      } catch (error) {\n        console.error('❌ Error parsing saved user:', error);\n        localStorage.removeItem('triathlonUser');\n      }\n    } else {\n      console.log('❌ No saved user found in localStorage');\n    }\n    \n    setLoading(false);\n    console.log('🏁 AuthContext loading complete');\n\n    return () => {\n      if (typeof remove === 'function') remove();\n    };\n  }, []);\n\n  const signup = async (email, password, name, phoneNumber) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password, name, phoneNumber }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Signup failed');\n      }\n\n      const responseData = await response.json();\n      console.log('✅ Signup response received:', responseData);\n      \n      const { user, token } = responseData;\n      \n      if (!token) {\n        console.error('❌ No token in signup response');\n        throw new Error('Signup failed - no token received');\n      }\n      \n      // Normalize user data to ensure consistent field names\n      const normalizedUser = {\n        ...user,\n        charterAccepted: user.charter_accepted || user.charterAccepted,\n        phoneNumber: user.phone_number || user.phoneNumber\n      };\n      \n      // Remove duplicate fields to keep only normalized versions\n      delete normalizedUser.phone_number;\n      delete normalizedUser.charter_accepted;\n      \n      // Store user and token separately\n      localStorage.setItem('triathlonUser', JSON.stringify(normalizedUser));\n      localStorage.setItem('triathlonToken', token);\n      console.log('💾 User and token stored in localStorage');\n      \n      setCurrentUser(normalizedUser);\n      return normalizedUser;\n    } catch (error) {\n      console.error('Signup error:', error);\n      throw error;\n    }\n  };\n\n  const login = async (email, password) => {\n    try {\n      console.log('🔐 Attempting login for:', email);\n      \n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Login failed');\n      }\n\n      const responseData = await response.json();\n      console.log('✅ Login response received:', responseData);\n      \n      const { user, token } = responseData;\n      \n      if (!token) {\n        console.error('❌ No token in login response');\n        throw new Error('Login failed - no token received');\n      }\n      \n      // Normalize user data to ensure consistent field names\n      const normalizedUser = {\n        ...user,\n        charterAccepted: user.charter_accepted || user.charterAccepted,\n        profilePictureUrl: user.profile_picture_url || user.profilePictureUrl,\n        phoneNumber: user.phone_number || user.phoneNumber,\n        bio: user.bio\n      };\n      \n      // Remove duplicate fields to keep only normalized versions\n      delete normalizedUser.phone_number;\n      delete normalizedUser.profile_picture_url;\n      delete normalizedUser.charter_accepted;\n      \n      // Store user and token separately\n      localStorage.setItem('triathlonUser', JSON.stringify(normalizedUser));\n      localStorage.setItem('triathlonToken', token);\n      console.log('💾 User and token stored in localStorage');\n      \n      setCurrentUser(normalizedUser);\n      console.log('👤 Current user state set to:', normalizedUser);\n      \n      return normalizedUser;\n    } catch (error) {\n      console.error('❌ Login error:', error);\n      throw error;\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('triathlonUser');\n    localStorage.removeItem('triathlonToken');\n    setCurrentUser(null);\n    \n    // Force a page reload to clear any protected routes\n    window.location.href = '/login';\n  };\n\n  const getUserRole = (user) => {\n    if (!user) return 'public';\n    return user.role || 'public';\n  };\n\n  const hasPermission = (user, requiredRole) => {\n    const userRole = getUserRole(user);\n    const roleHierarchy = {\n      'public': 0,\n      'pending': 1,\n      'member': 2,\n      'exec': 3,\n      'administrator': 4\n    };\n    \n    return roleHierarchy[userRole] >= roleHierarchy[requiredRole];\n  };\n\n  const isAdmin = (user) => {\n    return hasPermission(user, 'administrator');\n  };\n\n  const isExec = (user) => {\n    return hasPermission(user, 'exec');\n  };\n\n  const isMember = (user) => {\n    return hasPermission(user, 'member');\n  };\n\n  // Temporary function to promote current user to admin (for development)\n  const promoteToAdmin = () => {\n    if (currentUser) {\n      const updatedUser = { ...currentUser, role: 'administrator' };\n      setCurrentUser(updatedUser);\n      localStorage.setItem('triathlonUser', JSON.stringify(updatedUser));\n      return updatedUser;\n    }\n    return null;\n  };\n\n  // Function to update user profile\n  const updateUser = (updatedUserData) => {\n    console.log('🔄 AuthContext updateUser called with:', updatedUserData);\n    console.log('🔄 Current user before update:', currentUser);\n    \n    const updatedUser = { ...currentUser, ...updatedUserData };\n    \n    // Ensure charterAccepted field is normalized\n    if (updatedUserData.charter_accepted !== undefined) {\n      updatedUser.charterAccepted = updatedUserData.charter_accepted;\n    }\n    \n    console.log('🔄 Updated user object:', updatedUser);\n    \n    setCurrentUser(updatedUser);\n    localStorage.setItem('triathlonUser', JSON.stringify(updatedUser));\n    \n    console.log('✅ AuthContext updateUser completed');\n    return updatedUser;\n  };\n\n  // Check if current token is valid\n  const isTokenValid = async () => {\n    const token = localStorage.getItem('triathlonToken');\n    if (!token) return false;\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/profile`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      return response.ok;\n    } catch (error) {\n      console.error('Token validation error:', error);\n      return false;\n    }\n  };\n\n  // Refresh user data and token\n  const refreshUserData = async () => {\n    const token = localStorage.getItem('triathlonToken');\n    if (!token) return false;\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/profile`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      \n      if (response.ok) {\n        const { user } = await response.json();\n        \n        // Normalize user data to ensure consistent field names\n        const normalizedUser = {\n          ...user,\n          charterAccepted: user.charter_accepted || user.charterAccepted,\n          profilePictureUrl: user.profile_picture_url || user.profilePictureUrl,\n          phoneNumber: user.phone_number || user.phoneNumber,\n          bio: user.bio\n        };\n        \n        setCurrentUser(normalizedUser);\n        localStorage.setItem('triathlonUser', JSON.stringify(normalizedUser));\n        return true;\n      } else {\n        // Token is invalid, clear it and redirect to login\n        logout();\n        return false;\n      }\n    } catch (error) {\n      console.error('Refresh user data error:', error);\n      logout();\n      return false;\n    }\n  };\n\n  const value = {\n    currentUser,\n    signup,\n    login,\n    logout,\n    loading,\n    isAdmin,\n    isExec,\n    isMember,\n    hasPermission,\n    getUserRole,\n    promoteToAdmin,\n    updateUser,\n    isTokenValid,\n    refreshUserData\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}